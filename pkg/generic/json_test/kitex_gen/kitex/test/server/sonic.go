// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package server

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/cloudwego/kitex/pkg/generic/json_test/kitex_gen/base"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type TestEnum int64

const (
	TestEnum_FIRST  TestEnum = 1
	TestEnum_SECOND TestEnum = 2
	TestEnum_THIRD  TestEnum = 3
	TestEnum_FOURTH TestEnum = 4
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_FIRST:
		return "FIRST"
	case TestEnum_SECOND:
		return "SECOND"
	case TestEnum_THIRD:
		return "THIRD"
	case TestEnum_FOURTH:
		return "FOURTH"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "FIRST":
		return TestEnum_FIRST, nil
	case "SECOND":
		return TestEnum_SECOND, nil
	case "THIRD":
		return TestEnum_THIRD, nil
	case "FOURTH":
		return TestEnum_FOURTH, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GenericRequest struct {
	Vint64  int64      `thrift:"vint64,1" frugal:"1,default,i64" json:"vint64"`
	Text    string     `thrift:"text,2" frugal:"2,default,string" json:"text"`
	Nums    []int32    `thrift:"nums,3" frugal:"3,default,list<i32>" json:"nums"`
	Token   string     `thrift:"token,4" frugal:"4,default,string" json:"token"`
	Items   []string   `thrift:"items,5" frugal:"5,default,list<string>" json:"items"`
	Version int32      `thrift:"version,6" frugal:"6,default,i32" json:"version"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewGenericRequest() *GenericRequest {
	return &GenericRequest{}
}

func (p *GenericRequest) InitDefault() {
}

func (p *GenericRequest) GetVint64() (v int64) {
	return p.Vint64
}

func (p *GenericRequest) GetText() (v string) {
	return p.Text
}

func (p *GenericRequest) GetNums() (v []int32) {
	return p.Nums
}

func (p *GenericRequest) GetToken() (v string) {
	return p.Token
}

func (p *GenericRequest) GetItems() (v []string) {
	return p.Items
}

func (p *GenericRequest) GetVersion() (v int32) {
	return p.Version
}

var GenericRequest_Base_DEFAULT *base.Base

func (p *GenericRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GenericRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GenericRequest) SetVint64(val int64) {
	p.Vint64 = val
}
func (p *GenericRequest) SetText(val string) {
	p.Text = val
}
func (p *GenericRequest) SetNums(val []int32) {
	p.Nums = val
}
func (p *GenericRequest) SetToken(val string) {
	p.Token = val
}
func (p *GenericRequest) SetItems(val []string) {
	p.Items = val
}
func (p *GenericRequest) SetVersion(val int32) {
	p.Version = val
}
func (p *GenericRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GenericRequest = map[int16]string{
	1:   "vint64",
	2:   "text",
	3:   "nums",
	4:   "token",
	5:   "items",
	6:   "version",
	255: "Base",
}

func (p *GenericRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GenericRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenericRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenericRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Vint64 = _field
	return nil
}
func (p *GenericRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *GenericRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nums = _field
	return nil
}
func (p *GenericRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *GenericRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *GenericRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *GenericRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GenericRequest) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GenericRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenericRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vint64", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Vint64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenericRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenericRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nums", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Nums)); err != nil {
		return err
	}
	for _, v := range p.Nums {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GenericRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GenericRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GenericRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GenericRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GenericRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenericRequest(%+v)", *p)

}

func (p *GenericRequest) DeepEqual(ano *GenericRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Vint64) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.Nums) {
		return false
	}
	if !p.Field4DeepEqual(ano.Token) {
		return false
	}
	if !p.Field5DeepEqual(ano.Items) {
		return false
	}
	if !p.Field6DeepEqual(ano.Version) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GenericRequest) Field1DeepEqual(src int64) bool {

	if p.Vint64 != src {
		return false
	}
	return true
}
func (p *GenericRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *GenericRequest) Field3DeepEqual(src []int32) bool {

	if len(p.Nums) != len(src) {
		return false
	}
	for i, v := range p.Nums {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GenericRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *GenericRequest) Field5DeepEqual(src []string) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GenericRequest) Field6DeepEqual(src int32) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *GenericRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GenericResponse struct {
	Vint64    int64                    `thrift:"vint64,1" frugal:"1,default,i64" json:"vint64"`
	Text      string                   `thrift:"text,2" frugal:"2,default,string" json:"text"`
	Nums      []int32                  `thrift:"nums,3" frugal:"3,default,list<i32>" json:"nums"`
	Token     string                   `thrift:"token,4" frugal:"4,default,string" json:"token"`
	Items     []string                 `thrift:"items,5" frugal:"5,default,list<string>" json:"items"`
	Version   int32                    `thrift:"version,6" frugal:"6,default,i32" json:"version"`
	HttpCode  int32                    `thrift:"http_code,7" frugal:"7,default,i32" json:"http_code"`
	Boo       []string                 `thrift:"boo,8,optional" frugal:"8,optional,list<string>" json:"boo,omitempty"`
	Tenum     TestEnum                 `thrift:"tenum,9,optional" frugal:"9,optional,TestEnum" json:"tenum,omitempty"`
	BaseElems []*base.BaseElem         `thrift:"baseElems,10,optional" frugal:"10,optional,list<base.BaseElem>" json:"base_elems,omitempty"`
	Keys      []string                 `thrift:"keys,11,optional" frugal:"11,optional,set<string>" json:"keys,omitempty"`
	Values    map[int32]*base.BaseElem `thrift:"values,12,optional" frugal:"12,optional,map<i32:base.BaseElem>" json:"values,omitempty"`
	BaseResp  *base.BaseResp           `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"BaseResp,omitempty"`
}

func NewGenericResponse() *GenericResponse {
	return &GenericResponse{

		Boo: []string{
			"far",
			"boo",
		},
		Tenum: TestEnum_THIRD,
		BaseElems: []*base.BaseElem{
			&base.BaseElem{
				A: &(&struct{ x int32 }{34}).x,
			},
			&base.BaseElem{
				A: &(&struct{ x int32 }{56}).x,
			},
		},
		Keys: []string{
			"aaa",
			"bbb",
		},
		Values: map[int32]*base.BaseElem{
			12: &base.BaseElem{
				A: &(&struct{ x int32 }{34}).x,
			},
		},
	}
}

func (p *GenericResponse) InitDefault() {
	p.Boo = []string{
		"far",
		"boo",
	}
	p.Tenum = TestEnum_THIRD
	p.BaseElems = []*base.BaseElem{
		&base.BaseElem{
			A: &(&struct{ x int32 }{34}).x,
		},
		&base.BaseElem{
			A: &(&struct{ x int32 }{56}).x,
		},
	}
	p.Keys = []string{
		"aaa",
		"bbb",
	}
	p.Values = map[int32]*base.BaseElem{
		12: &base.BaseElem{
			A: &(&struct{ x int32 }{34}).x,
		},
	}
}

func (p *GenericResponse) GetVint64() (v int64) {
	return p.Vint64
}

func (p *GenericResponse) GetText() (v string) {
	return p.Text
}

func (p *GenericResponse) GetNums() (v []int32) {
	return p.Nums
}

func (p *GenericResponse) GetToken() (v string) {
	return p.Token
}

func (p *GenericResponse) GetItems() (v []string) {
	return p.Items
}

func (p *GenericResponse) GetVersion() (v int32) {
	return p.Version
}

func (p *GenericResponse) GetHttpCode() (v int32) {
	return p.HttpCode
}

var GenericResponse_Boo_DEFAULT []string = []string{
	"far",
	"boo",
}

func (p *GenericResponse) GetBoo() (v []string) {
	if !p.IsSetBoo() {
		return GenericResponse_Boo_DEFAULT
	}
	return p.Boo
}

var GenericResponse_Tenum_DEFAULT TestEnum = TestEnum_THIRD

func (p *GenericResponse) GetTenum() (v TestEnum) {
	if !p.IsSetTenum() {
		return GenericResponse_Tenum_DEFAULT
	}
	return p.Tenum
}

var GenericResponse_BaseElems_DEFAULT []*base.BaseElem = []*base.BaseElem{
	&base.BaseElem{
		A: &(&struct{ x int32 }{34}).x,
	},
	&base.BaseElem{
		A: &(&struct{ x int32 }{56}).x,
	},
}

func (p *GenericResponse) GetBaseElems() (v []*base.BaseElem) {
	if !p.IsSetBaseElems() {
		return GenericResponse_BaseElems_DEFAULT
	}
	return p.BaseElems
}

var GenericResponse_Keys_DEFAULT []string = []string{
	"aaa",
	"bbb",
}

func (p *GenericResponse) GetKeys() (v []string) {
	if !p.IsSetKeys() {
		return GenericResponse_Keys_DEFAULT
	}
	return p.Keys
}

var GenericResponse_Values_DEFAULT map[int32]*base.BaseElem = map[int32]*base.BaseElem{
	12: &base.BaseElem{
		A: &(&struct{ x int32 }{34}).x,
	},
}

func (p *GenericResponse) GetValues() (v map[int32]*base.BaseElem) {
	if !p.IsSetValues() {
		return GenericResponse_Values_DEFAULT
	}
	return p.Values
}

var GenericResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GenericResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GenericResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GenericResponse) SetVint64(val int64) {
	p.Vint64 = val
}
func (p *GenericResponse) SetText(val string) {
	p.Text = val
}
func (p *GenericResponse) SetNums(val []int32) {
	p.Nums = val
}
func (p *GenericResponse) SetToken(val string) {
	p.Token = val
}
func (p *GenericResponse) SetItems(val []string) {
	p.Items = val
}
func (p *GenericResponse) SetVersion(val int32) {
	p.Version = val
}
func (p *GenericResponse) SetHttpCode(val int32) {
	p.HttpCode = val
}
func (p *GenericResponse) SetBoo(val []string) {
	p.Boo = val
}
func (p *GenericResponse) SetTenum(val TestEnum) {
	p.Tenum = val
}
func (p *GenericResponse) SetBaseElems(val []*base.BaseElem) {
	p.BaseElems = val
}
func (p *GenericResponse) SetKeys(val []string) {
	p.Keys = val
}
func (p *GenericResponse) SetValues(val map[int32]*base.BaseElem) {
	p.Values = val
}
func (p *GenericResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GenericResponse = map[int16]string{
	1:   "vint64",
	2:   "text",
	3:   "nums",
	4:   "token",
	5:   "items",
	6:   "version",
	7:   "http_code",
	8:   "boo",
	9:   "tenum",
	10:  "baseElems",
	11:  "keys",
	12:  "values",
	255: "BaseResp",
}

func (p *GenericResponse) IsSetBoo() bool {
	return p.Boo != nil
}

func (p *GenericResponse) IsSetTenum() bool {
	return p.Tenum != GenericResponse_Tenum_DEFAULT
}

func (p *GenericResponse) IsSetBaseElems() bool {
	return p.BaseElems != nil
}

func (p *GenericResponse) IsSetKeys() bool {
	return p.Keys != nil
}

func (p *GenericResponse) IsSetValues() bool {
	return p.Values != nil
}

func (p *GenericResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GenericResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenericResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenericResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Vint64 = _field
	return nil
}
func (p *GenericResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Text = _field
	return nil
}
func (p *GenericResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {

		var _elem int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Nums = _field
	return nil
}
func (p *GenericResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Token = _field
	return nil
}
func (p *GenericResponse) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *GenericResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *GenericResponse) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HttpCode = _field
	return nil
}
func (p *GenericResponse) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Boo = _field
	return nil
}
func (p *GenericResponse) ReadField9(iprot thrift.TProtocol) error {

	var _field TestEnum
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = TestEnum(v)
	}
	p.Tenum = _field
	return nil
}
func (p *GenericResponse) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*base.BaseElem, 0, size)
	values := make([]base.BaseElem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BaseElems = _field
	return nil
}
func (p *GenericResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	p.Keys = _field
	return nil
}
func (p *GenericResponse) ReadField12(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int32]*base.BaseElem, size)
	values := make([]base.BaseElem, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Values = _field
	return nil
}
func (p *GenericResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GenericResponse) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GenericResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenericResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("vint64", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Vint64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenericResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Text); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenericResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("nums", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Nums)); err != nil {
		return err
	}
	for _, v := range p.Nums {
		if err := oprot.WriteI32(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GenericResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Token); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GenericResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GenericResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GenericResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("http_code", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.HttpCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GenericResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoo() {
		if err = oprot.WriteFieldBegin("boo", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Boo)); err != nil {
			return err
		}
		for _, v := range p.Boo {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GenericResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTenum() {
		if err = oprot.WriteFieldBegin("tenum", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(p.Tenum)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GenericResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseElems() {
		if err = oprot.WriteFieldBegin("baseElems", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BaseElems)); err != nil {
			return err
		}
		for _, v := range p.BaseElems {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GenericResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeys() {
		if err = oprot.WriteFieldBegin("keys", thrift.SET, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Keys)); err != nil {
			return err
		}
		for i := 0; i < len(p.Keys); i++ {
			for j := i + 1; j < len(p.Keys); j++ {
				if func(tgt, src string) bool {
					if strings.Compare(tgt, src) != 0 {
						return false
					}
					return true
				}(p.Keys[i], p.Keys[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Keys[i]))
				}
			}
		}
		for _, v := range p.Keys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GenericResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetValues() {
		if err = oprot.WriteFieldBegin("values", thrift.MAP, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Values)); err != nil {
			return err
		}
		for k, v := range p.Values {
			if err := oprot.WriteI32(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GenericResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GenericResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenericResponse(%+v)", *p)

}

func (p *GenericResponse) DeepEqual(ano *GenericResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Vint64) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.Nums) {
		return false
	}
	if !p.Field4DeepEqual(ano.Token) {
		return false
	}
	if !p.Field5DeepEqual(ano.Items) {
		return false
	}
	if !p.Field6DeepEqual(ano.Version) {
		return false
	}
	if !p.Field7DeepEqual(ano.HttpCode) {
		return false
	}
	if !p.Field8DeepEqual(ano.Boo) {
		return false
	}
	if !p.Field9DeepEqual(ano.Tenum) {
		return false
	}
	if !p.Field10DeepEqual(ano.BaseElems) {
		return false
	}
	if !p.Field11DeepEqual(ano.Keys) {
		return false
	}
	if !p.Field12DeepEqual(ano.Values) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GenericResponse) Field1DeepEqual(src int64) bool {

	if p.Vint64 != src {
		return false
	}
	return true
}
func (p *GenericResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Text, src) != 0 {
		return false
	}
	return true
}
func (p *GenericResponse) Field3DeepEqual(src []int32) bool {

	if len(p.Nums) != len(src) {
		return false
	}
	for i, v := range p.Nums {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *GenericResponse) Field5DeepEqual(src []string) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field6DeepEqual(src int32) bool {

	if p.Version != src {
		return false
	}
	return true
}
func (p *GenericResponse) Field7DeepEqual(src int32) bool {

	if p.HttpCode != src {
		return false
	}
	return true
}
func (p *GenericResponse) Field8DeepEqual(src []string) bool {

	if len(p.Boo) != len(src) {
		return false
	}
	for i, v := range p.Boo {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field9DeepEqual(src TestEnum) bool {

	if p.Tenum != src {
		return false
	}
	return true
}
func (p *GenericResponse) Field10DeepEqual(src []*base.BaseElem) bool {

	if len(p.BaseElems) != len(src) {
		return false
	}
	for i, v := range p.BaseElems {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field11DeepEqual(src []string) bool {

	if len(p.Keys) != len(src) {
		return false
	}
	for i, v := range p.Keys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field12DeepEqual(src map[int32]*base.BaseElem) bool {

	if len(p.Values) != len(src) {
		return false
	}
	for k, v := range p.Values {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GenericResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type STService interface {
	TestGeneric(ctx context.Context, req *GenericRequest) (r *GenericResponse, err error)
}

type STServiceTestGenericArgs struct {
	Req *GenericRequest `thrift:"req,1" frugal:"1,default,GenericRequest" json:"req"`
}

func NewSTServiceTestGenericArgs() *STServiceTestGenericArgs {
	return &STServiceTestGenericArgs{}
}

func (p *STServiceTestGenericArgs) InitDefault() {
}

var STServiceTestGenericArgs_Req_DEFAULT *GenericRequest

func (p *STServiceTestGenericArgs) GetReq() (v *GenericRequest) {
	if !p.IsSetReq() {
		return STServiceTestGenericArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestGenericArgs) SetReq(val *GenericRequest) {
	p.Req = val
}

var fieldIDToName_STServiceTestGenericArgs = map[int16]string{
	1: "req",
}

func (p *STServiceTestGenericArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestGenericArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestGenericArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestGenericArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGenericRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *STServiceTestGenericArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("testGeneric_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestGenericArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestGenericArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestGenericArgs(%+v)", *p)

}

func (p *STServiceTestGenericArgs) DeepEqual(ano *STServiceTestGenericArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceTestGenericArgs) Field1DeepEqual(src *GenericRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestGenericResult struct {
	Success *GenericResponse `thrift:"success,0,optional" frugal:"0,optional,GenericResponse" json:"success,omitempty"`
}

func NewSTServiceTestGenericResult() *STServiceTestGenericResult {
	return &STServiceTestGenericResult{}
}

func (p *STServiceTestGenericResult) InitDefault() {
}

var STServiceTestGenericResult_Success_DEFAULT *GenericResponse

func (p *STServiceTestGenericResult) GetSuccess() (v *GenericResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestGenericResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestGenericResult) SetSuccess(x interface{}) {
	p.Success = x.(*GenericResponse)
}

var fieldIDToName_STServiceTestGenericResult = map[int16]string{
	0: "success",
}

func (p *STServiceTestGenericResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestGenericResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestGenericResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestGenericResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGenericResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *STServiceTestGenericResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("testGeneric_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestGenericResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceTestGenericResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestGenericResult(%+v)", *p)

}

func (p *STServiceTestGenericResult) DeepEqual(ano *STServiceTestGenericResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *STServiceTestGenericResult) Field0DeepEqual(src *GenericResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
