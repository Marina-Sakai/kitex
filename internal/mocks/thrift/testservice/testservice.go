// Code generated by Kitex v0.11.0. DO NOT EDIT.

package testservice

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	thrift0 "github.com/cloudwego/kitex/internal/mocks/thrift"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newTestServiceEchoArgs,
		newTestServiceEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"EchoClient": kitex.NewMethodInfo(
		echoClientHandler,
		newTestServiceEchoClientArgs,
		newTestServiceEchoClientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"EchoServer": kitex.NewMethodInfo(
		echoServerHandler,
		newTestServiceEchoServerArgs,
		newTestServiceEchoServerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"EchoUnary": kitex.NewMethodInfo(
		echoUnaryHandler,
		newTestServiceEchoUnaryArgs,
		newTestServiceEchoUnaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EchoBizException": kitex.NewMethodInfo(
		echoBizExceptionHandler,
		newTestServiceEchoBizExceptionArgs,
		newTestServiceEchoBizExceptionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"EchoPingPong": kitex.NewMethodInfo(
		echoPingPongHandler,
		newTestServiceEchoPingPongArgs,
		newTestServiceEchoPingPongResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	testServiceServiceInfo                = NewServiceInfo()
	testServiceServiceInfoForClient       = NewServiceInfoForClient()
	testServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return testServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return testServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return testServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TestService"
	handlerType := (*thrift0.TestService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "thrift",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.0",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("TestService.Echo is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &testServiceEchoServer{st.Stream}
	return handler.(thrift0.TestService).Echo(stream)
}

type testServiceEchoClient struct {
	streaming.Stream
}

func (x *testServiceEchoClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *testServiceEchoClient) Send(m *thrift0.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *testServiceEchoClient) Recv() (*thrift0.Response, error) {
	m := new(thrift0.Response)
	return m, x.Stream.RecvMsg(m)
}

type testServiceEchoServer struct {
	streaming.Stream
}

func (x *testServiceEchoServer) Send(m *thrift0.Response) error {
	return x.Stream.SendMsg(m)
}

func (x *testServiceEchoServer) Recv() (*thrift0.Request, error) {
	m := new(thrift0.Request)
	return m, x.Stream.RecvMsg(m)
}

func newTestServiceEchoArgs() interface{} {
	return thrift0.NewTestServiceEchoArgs()
}

func newTestServiceEchoResult() interface{} {
	return thrift0.NewTestServiceEchoResult()
}

func echoClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("TestService.EchoClient is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &testServiceEchoClientServer{st.Stream}
	return handler.(thrift0.TestService).EchoClient(stream)
}

type testServiceEchoClientClient struct {
	streaming.Stream
}

func (x *testServiceEchoClientClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *testServiceEchoClientClient) Send(m *thrift0.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *testServiceEchoClientClient) CloseAndRecv() (*thrift0.Response, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(thrift0.Response)
	return m, x.Stream.RecvMsg(m)
}

type testServiceEchoClientServer struct {
	streaming.Stream
}

func (x *testServiceEchoClientServer) SendAndClose(m *thrift0.Response) error {
	return x.Stream.SendMsg(m)
}

func (x *testServiceEchoClientServer) Recv() (*thrift0.Request, error) {
	m := new(thrift0.Request)
	return m, x.Stream.RecvMsg(m)
}

func newTestServiceEchoClientArgs() interface{} {
	return thrift0.NewTestServiceEchoClientArgs()
}

func newTestServiceEchoClientResult() interface{} {
	return thrift0.NewTestServiceEchoClientResult()
}

func echoServerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("TestService.EchoServer is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &testServiceEchoServerServer{st.Stream}
	req := new(thrift0.Request)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(thrift0.TestService).EchoServer(req, stream)
}

type testServiceEchoServerClient struct {
	streaming.Stream
}

func (x *testServiceEchoServerClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *testServiceEchoServerClient) Recv() (*thrift0.Response, error) {
	m := new(thrift0.Response)
	return m, x.Stream.RecvMsg(m)
}

type testServiceEchoServerServer struct {
	streaming.Stream
}

func (x *testServiceEchoServerServer) Send(m *thrift0.Response) error {
	return x.Stream.SendMsg(m)
}

func newTestServiceEchoServerArgs() interface{} {
	return thrift0.NewTestServiceEchoServerArgs()
}

func newTestServiceEchoServerResult() interface{} {
	return thrift0.NewTestServiceEchoServerResult()
}

func echoUnaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	if streaming.GetStream(ctx) == nil {
		return errors.New("TestService.EchoUnary is a thrift streaming unary method, please call with Kitex StreamClient or remove the annotation streaming.mode")
	}
	realArg := arg.(*thrift0.TestServiceEchoUnaryArgs)
	realResult := result.(*thrift0.TestServiceEchoUnaryResult)
	success, err := handler.(thrift0.TestService).EchoUnary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoUnaryArgs() interface{} {
	return thrift0.NewTestServiceEchoUnaryArgs()
}

func newTestServiceEchoUnaryResult() interface{} {
	return thrift0.NewTestServiceEchoUnaryResult()
}

func echoBizExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("TestService.EchoBizException is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &testServiceEchoBizExceptionServer{st.Stream}
	return handler.(thrift0.TestService).EchoBizException(stream)
}

type testServiceEchoBizExceptionClient struct {
	streaming.Stream
}

func (x *testServiceEchoBizExceptionClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *testServiceEchoBizExceptionClient) Send(m *thrift0.Request) error {
	return x.Stream.SendMsg(m)
}
func (x *testServiceEchoBizExceptionClient) CloseAndRecv() (*thrift0.Response, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(thrift0.Response)
	return m, x.Stream.RecvMsg(m)
}

type testServiceEchoBizExceptionServer struct {
	streaming.Stream
}

func (x *testServiceEchoBizExceptionServer) SendAndClose(m *thrift0.Response) error {
	return x.Stream.SendMsg(m)
}

func (x *testServiceEchoBizExceptionServer) Recv() (*thrift0.Request, error) {
	m := new(thrift0.Request)
	return m, x.Stream.RecvMsg(m)
}

func newTestServiceEchoBizExceptionArgs() interface{} {
	return thrift0.NewTestServiceEchoBizExceptionArgs()
}

func newTestServiceEchoBizExceptionResult() interface{} {
	return thrift0.NewTestServiceEchoBizExceptionResult()
}

func echoPingPongHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*thrift0.TestServiceEchoPingPongArgs)
	realResult := result.(*thrift0.TestServiceEchoPingPongResult)
	success, err := handler.(thrift0.TestService).EchoPingPong(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestServiceEchoPingPongArgs() interface{} {
	return thrift0.NewTestServiceEchoPingPongArgs()
}

func newTestServiceEchoPingPongResult() interface{} {
	return thrift0.NewTestServiceEchoPingPongResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context) (TestService_EchoClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "Echo", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &testServiceEchoClient{res.Stream}
	return stream, nil
}

func (p *kClient) EchoClient(ctx context.Context) (TestService_EchoClientClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoClient", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &testServiceEchoClientClient{res.Stream}
	return stream, nil
}

func (p *kClient) EchoServer(ctx context.Context, req *thrift0.Request) (TestService_EchoServerClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoServer", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &testServiceEchoServerClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) EchoUnary(ctx context.Context, req *thrift0.Request) (r *thrift0.Response, err error) {
	var _args thrift0.TestServiceEchoUnaryArgs
	_args.Req = req
	var _result thrift0.TestServiceEchoUnaryResult
	if err = p.c.Call(ctx, "EchoUnary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBizException(ctx context.Context) (TestService_EchoBizExceptionClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoBizException", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &testServiceEchoBizExceptionClient{res.Stream}
	return stream, nil
}

func (p *kClient) EchoPingPong(ctx context.Context, req *thrift0.Request) (r *thrift0.Response, err error) {
	var _args thrift0.TestServiceEchoPingPongArgs
	_args.Req = req
	var _result thrift0.TestServiceEchoPingPongResult
	if err = p.c.Call(ctx, "EchoPingPong", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
